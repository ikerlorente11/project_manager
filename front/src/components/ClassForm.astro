---
import Button from "./Button.astro";

const API_BASE_URL = import.meta.env.PUBLIC_API_BASE_URL;

const { user_id, price, current_class } = Astro.props;
const method = current_class ? "PUT" : "POST";
const url = current_class
    ? `${API_BASE_URL}/classes/${current_class.id}`
    : `${API_BASE_URL}/classes`;

let hour = 0;
let minutes = 0;

if (current_class) {
    hour = Math.trunc(current_class.time / 60);
    minutes = current_class.time - hour * 60;
}
---

<form id="classForm" method={method} action={url}>
    <input type="hidden" name="student_id" value={user_id} />
    <input
        type="date"
        name="date"
        value={current_class?.date || new Date().toISOString().split("T")[0]}
        required
    />
    <div class="time">
        <input
            id="hours"
            type="number"
            name="hours"
            placeholder="Horas"
            value={hour}
            required
        />:
        <input
            id="minutes"
            type="number"
            name="minutes"
            placeholder="Minutos"
            value={minutes}
            required
        />
    </div>
    <div class="time-buttons">
        <div>
            <Button id="btn-1h" text="+1h" type="default" css="fill-available small" />
            <Button id="btn-4h" text="+4h" type="default" css="fill-available small" />
        </div>
        <div>
            <Button id="btn-10m" text="+10'" type="default" css="fill-available small" />
            <Button id="btn-30m" text="+30'" type="default" css="fill-available small" />
        </div>
    </div>
    <input
        type="number"
        name="price"
        placeholder="Precio hora"
        value={current_class?.price || price}
        required
    />
    <div class="radio-group">
        <div>
            <input
                id="paid"
                type="radio"
                name="paid"
                value="1"
                checked={current_class?.paid}
            />
            <label for="paid">Pagado</label>
        </div>
        <div>
            <input
                id="unpaid"
                type="radio"
                name="paid"
                value="0"
                checked={!current_class?.paid}
            />
            <label for="unpaid">Sin pagar</label>
        </div>
    </div>
    <div class="btn-group">
        {
            current_class ? (
                <Button text="Guardar" type="default" css="small fill-available" />
                <Button
                    id="deleteClass"
                    text="Borrar"
                    type="error"
                    data_id={current_class.id}
                    user_id={user_id}
                    css="small fill-available"
                />
            ) : (
                <Button text="Guardar" type="default" />
            )
        }
    </div>
</form>

<script defer>
    document
        .getElementById("classForm")
        .addEventListener("submit", async function (event) {
            event.preventDefault();

            const formData = new FormData(this);
            let jsonData = Object.fromEntries(formData.entries());
            jsonData["time"] =
                Number(jsonData.hours) * 60 + Number(jsonData.minutes);

            const method = this.method == "post" ? "POST" : "PUT";
            const action = this.action;

            try {
                const response = await fetch(action, {
                    method: method,
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify(jsonData),
                });

                if (response.ok) {
                    const baseUrl = document.body.getAttribute("data-base-url");
                    if (this.method == "post") {
                        console.log("Clase guardada exitosamente.");
                    } else {
                        console.log("Clase actualizada exitosamente.");
                    }
                    window.location.href =
                        `${baseUrl}students/` + jsonData.student_id;
                } else {
                    console.error("Error en la respuesta del servidor.");
                }
            } catch (error) {
                console.error("Error en la petición:", error);
            }
        });

    document.addEventListener("DOMContentLoaded", function () {
        if (document.getElementById("deleteClass")) {
            document
                .getElementById("deleteClass")
                .addEventListener("click", async function () {
                    const id = this.getAttribute("data_id");
                    const user_id = this.getAttribute("user_id");
                    try {
                        const apiBaseUrl =
                            document.body.getAttribute("data-api-base-url");

                        const response = await fetch(
                            `${apiBaseUrl}/classes/${id}`,
                            {
                                method: "DELETE",
                                headers: {
                                    "Content-Type": "application/json",
                                },
                            },
                        );

                        if (response.ok) {
                            const baseUrl =
                                document.body.getAttribute("data-base-url");
                            console.log("Clase eliminada exitosamente.");
                            window.location.href =
                                `${baseUrl}students/` + user_id;
                        } else {
                            console.error(
                                "Error al eliminar clase:",
                                await response.text(),
                            );
                        }
                    } catch (error) {
                        console.error("Error en la petición:", error);
                    }
                });
        }
    });

    document.getElementById("btn-1h").addEventListener("click", (event) => {
        event.preventDefault();
        const add = 1;
        let hourInput = document.getElementById("hours");
        hourInput.value = Number(hourInput.value) + add;
    });
    document.getElementById("btn-4h").addEventListener("click", (event) => {
        event.preventDefault();
        const add = 4;
        let hourInput = document.getElementById("hours");
        hourInput.value = Number(hourInput.value) + add;
    });
    document.getElementById("btn-10m").addEventListener("click", (event) => {
        event.preventDefault();
        const add = 10;
        let minuteInput = document.getElementById("minutes");

        if (Number(minuteInput.value) + add >= 60) {
            let hourInput = document.getElementById("hours");
            hourInput.value = Number(hourInput.value) + 1;

            minuteInput.value = Number(minuteInput.value) + add - 60;
        } else {
            minuteInput.value = Number(minuteInput.value) + add;
        }
    });
    document.getElementById("btn-30m").addEventListener("click", (event) => {
        event.preventDefault();
        const add = 30;
        let minuteInput = document.getElementById("minutes");

        if (Number(minuteInput.value) + add >= 60) {
            let hourInput = document.getElementById("hours");
            hourInput.value = Number(hourInput.value) + 1;

            minuteInput.value = Number(minuteInput.value) + add - 60;
        } else {
            minuteInput.value = Number(minuteInput.value) + add;
        }
    });
</script>

<style>
    form {
        width: -webkit-fill-available;
        max-width: 75%;
        margin: 0 auto;
        margin-top: 3rem;
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    input {
        border: none;
        font-size: 1.3rem;
        padding: 0.5rem;
        border-radius: 3px;
        background: var(--background-input);
        width: -webkit-fill-available;
    }

    input:focus {
        border: none;
        outline: none;
    }

    input[type="number"]::-webkit-outer-spin-button,
    input[type="number"]::-webkit-inner-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    input[type="number"] {
        -moz-appearance: textfield;
    }

    .time {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 0.3rem;
        font-size: 1.5rem;
        margin-top: 0.7rem;
    }

    .time input {
        width: 15%;
    }

    .time-buttons {
        margin-top: .3rem;
        margin-bottom: 0.7rem;
        display: flex;
        flex-wrap: wrap;
        justify-content: space-between;
        gap: .5rem;
    }

    .time-buttons > div {
        display: flex;
        width: -webkit-fill-available;
        gap: .5rem;
    }

    .radio-group {
        display: flex;
        justify-content: space-between;
        margin: 0.5rem 1rem 0 1rem;
        font-size: 1.2rem;
    }

    .radio-group > div {
        width: fit-content;
    }

    .radio-group,
    .radio-group input,
    .radio-group label {
        cursor: pointer;
    }

    .radio-group input {
        transform: scale(1.2);
        width: fit-content;
    }

    .btn-group {
        display: flex;
        margin-top: 1rem;
        gap: 2rem;
    }
</style>
